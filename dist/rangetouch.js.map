{"version":3,"sources":["src/js/rangetouch.js","src/js/config.js","src/js/utils/is.js","src/js/utils/numbers.js","src/js/utils/css.js","src/js/utils/events.js"],"names":["global","factory","exports","module","define","amd","self","RangeTouch","this","defaults","addCSS","thumbWidth","watch","getConstructor","input","constructor","instanceOf","b","isNullOrUndefined","isObject","Object","isString","String","isArray","Array","isNodeList","NodeList","is","Element","Event","length","keys","round","number","step","c","value","match","Math","max","getDecimalPlaces","parseFloat","toFixed","places","target","options","element","document","querySelector","rangeTouch","config","init","enabled","documentElement","static","arguments","targets","from","querySelectorAll","filter","d","MutationObserver","mutations","forEach","mutation","addedNodes","node","selector","includes","call","matches","observer","observe","body","childList","subtree","map","t","style","userSelect","webKitUserSelect","touchAction","listeners","destroy","toggle","type","method","event","set","get","touch","changedTouches","min","getAttribute","g","h","getBoundingClientRect","clientRect","width","height","clientY","top","clientX","left","percent","disabled","preventDefault","bubbles","dispatchEvent","trigger"],"mappings":"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","file":"rangetouch.js","sourcesContent":["// ==========================================================================\r\n// rangetouch.js v2.0.1\r\n// Making <input type=\"range\"> work on touch devices\r\n// https://github.com/sampotts/rangetouch\r\n// License: The MIT License (MIT)\r\n// ==========================================================================\r\n\r\nimport defaults from './config';\r\nimport { matches } from './utils/css';\r\nimport { trigger } from './utils/events';\r\nimport is from './utils/is';\r\nimport { round } from './utils/numbers';\r\n\r\nclass RangeTouch {\r\n    /**\r\n     * Setup a new instance\r\n     * @param {String|Element} target\r\n     * @param {Object} options\r\n     */\r\n    constructor(target, options) {\r\n        if (is.element(target)) {\r\n            // An Element is passed, use it directly\r\n            this.element = target;\r\n        } else if (is.string(target)) {\r\n            // A CSS Selector is passed, fetch it from the DOM\r\n            this.element = document.querySelector(target);\r\n        }\r\n\r\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\r\n            return;\r\n        }\r\n\r\n        this.config = { ...defaults, ...options };\r\n\r\n        this.init();\r\n    }\r\n\r\n    static get enabled() {\r\n        return 'ontouchstart' in document.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Setup multiple instances\r\n     * @param {String|Element|NodeList|Array} target\r\n     * @param {Object} options\r\n     */\r\n    static setup(target, options = {}) {\r\n        let targets = null;\r\n\r\n        if (is.empty(target) || is.string(target)) {\r\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\r\n        } else if (is.element(target)) {\r\n            targets = [target];\r\n        } else if (is.nodeList(target)) {\r\n            targets = Array.from(target);\r\n        } else if (is.array(target)) {\r\n            targets = target.filter(is.element);\r\n        }\r\n\r\n        if (is.empty(targets)) {\r\n            return null;\r\n        }\r\n\r\n        const config = { ...defaults, ...options };\r\n\r\n        if (is.string(target) && config.watch) {\r\n            // Create an observer instance\r\n            const observer = new MutationObserver(mutations => {\r\n                Array.from(mutations).forEach(mutation => {\r\n                    Array.from(mutation.addedNodes).forEach(node => {\r\n                        if (!is.element(node) || !matches(node, target)) {\r\n                            return;\r\n                        }\r\n\r\n                        // eslint-disable-next-line no-unused-vars\r\n                        const range = new RangeTouch(node, config);\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Pass in the target node, as well as the observer options\r\n            observer.observe(document.body, {\r\n                childList: true,\r\n                subtree: true,\r\n            });\r\n        }\r\n\r\n        return targets.map(t => new RangeTouch(t, options));\r\n    }\r\n\r\n    init() {\r\n        // Bail if not a touch enabled device\r\n        if (!RangeTouch.enabled) {\r\n            return;\r\n        }\r\n\r\n        // Add useful CSS\r\n        if (this.config.addCSS) {\r\n            this.element.style.userSelect = 'none';\r\n            this.element.style.webKitUserSelect = 'none';\r\n            this.element.style.touchAction = 'manipulation';\r\n        }\r\n\r\n        this.listeners(true);\r\n\r\n        this.element.rangeTouch = this;\r\n    }\r\n\r\n    destroy() {\r\n        // Bail if not a touch enabled device\r\n        if (!RangeTouch.enabled) {\r\n            return;\r\n        }\r\n\r\n        // Remove useful CSS\r\n        if (this.config.addCSS) {\r\n            this.element.style.userSelect = '';\r\n            this.element.style.webKitUserSelect = '';\r\n            this.element.style.touchAction = '';\r\n        }\r\n\r\n        this.listeners(false);\r\n\r\n        this.element.rangeTouch = null;\r\n    }\r\n\r\n    listeners(toggle) {\r\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\r\n\r\n        // Listen for events\r\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\r\n            this.element[method](type, event => this.set(event), false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the value based on touch position\r\n     * @param {Event} event\r\n     */\r\n    get(event) {\r\n        if (!RangeTouch.enabled || !is.event(event)) {\r\n            return null;\r\n        }\r\n\r\n        const input = event.target;\r\n        const touch = event.changedTouches[0];\r\n        const min = parseFloat(input.getAttribute('min')) || 0;\r\n        const max = parseFloat(input.getAttribute('max')) || 100;\r\n        const step = parseFloat(input.getAttribute('step')) || 1;\r\n        const delta = max - min;\r\n\r\n        // Calculate percentage\r\n        let percent;\r\n        const clientRect = input.getBoundingClientRect();\r\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\r\n\r\n        // Determine left percentage\r\n        if(clientRect.height > clientRect.width) {\r\n            percent = (100 / clientRect.height) * (touch.clientY - clientRect.top);\r\n        } else {\r\n            percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\r\n        }\r\n\r\n        // Don't allow outside bounds\r\n        if (percent < 0) {\r\n            percent = 0;\r\n        } else if (percent > 100) {\r\n            percent = 100;\r\n        }\r\n\r\n        // Factor in the thumb offset\r\n        if (percent < 50) {\r\n            percent -= (100 - percent * 2) * thumbWidth;\r\n        } else if (percent > 50) {\r\n            percent += (percent - 50) * 2 * thumbWidth;\r\n        }\r\n\r\n        // Find the closest step to the mouse position\r\n        return min + round(delta * (percent / 100), step);\r\n    }\r\n\r\n    /**\r\n     * Update range value based on position\r\n     * @param {Event} event\r\n     */\r\n    set(event) {\r\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\r\n            return;\r\n        }\r\n\r\n        // Prevent text highlight on iOS\r\n        event.preventDefault();\r\n\r\n        // Set value\r\n        // eslint-disable-next-line no-param-reassign\r\n        event.target.value = this.get(event);\r\n\r\n        // Trigger event\r\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\r\n    }\r\n}\r\n\r\nexport default RangeTouch;\r\n","const defaults = {\r\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\r\n    thumbWidth: 15, // The width of the thumb handle\r\n    watch: true, // Watch for new elements that match a string target\r\n};\r\n\r\nexport default defaults;","// ==========================================================================\r\n// Type checking utils\r\n// ==========================================================================\r\n\r\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\r\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\r\n\r\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\r\nconst isObject = input => getConstructor(input) === Object;\r\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\r\nconst isString = input => getConstructor(input) === String;\r\nconst isBoolean = input => getConstructor(input) === Boolean;\r\nconst isFunction = input => getConstructor(input) === Function;\r\nconst isArray = input => Array.isArray(input);\r\nconst isNodeList = input => instanceOf(input, NodeList);\r\nconst isElement = input => instanceOf(input, Element);\r\nconst isEvent = input => instanceOf(input, Event);\r\nconst isEmpty = input =>\r\n    isNullOrUndefined(input) ||\r\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\r\n    (isObject(input) && !Object.keys(input).length);\r\n\r\nexport default {\r\n    nullOrUndefined: isNullOrUndefined,\r\n    object: isObject,\r\n    number: isNumber,\r\n    string: isString,\r\n    boolean: isBoolean,\r\n    function: isFunction,\r\n    array: isArray,\r\n    nodeList: isNodeList,\r\n    element: isElement,\r\n    event: isEvent,\r\n    empty: isEmpty,\r\n};\r\n","// Get the number of decimal places\r\nexport function getDecimalPlaces(value) {\r\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n\r\n    if (!match) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(\r\n        0,\r\n        // Number of digits right of decimal point.\r\n        (match[1] ? match[1].length : 0) -\r\n            // Adjust for scientific notation.\r\n            (match[2] ? +match[2] : 0),\r\n    );\r\n}\r\n\r\n// Round to the nearest step\r\nexport function round(number, step) {\r\n    if (step < 1) {\r\n        const places = getDecimalPlaces(step);\r\n        return parseFloat(number.toFixed(places));\r\n    }\r\n    return Math.round(number / step) * step;\r\n}\r\n\r\nexport default { getDecimalPlaces, round };\r\n","// Element matches a selector\r\nexport function matches(element, selector) {\r\n    const prototype = { Element };\r\n\r\n    function match() {\r\n        return Array.from(document.querySelectorAll(selector)).includes(this);\r\n    }\r\n\r\n    const method =\r\n        prototype.matches ||\r\n        prototype.webkitMatchesSelector ||\r\n        prototype.mozMatchesSelector ||\r\n        prototype.msMatchesSelector ||\r\n        match;\r\n\r\n    return method.call(element, selector);\r\n}\r\n\r\nexport default { matches };\r\n","// Trigger event\r\nexport function trigger(element, type) {\r\n    if (!element || !type) {\r\n        return;\r\n    }\r\n\r\n    // Create and dispatch the event\r\n    const event = new Event(type, { bubbles: true });\r\n\r\n    // Dispatch the event\r\n    element.dispatchEvent(event);\r\n}\r\n\r\nexport default { trigger };\r\n"]}