{"version":3,"sources":["src/js/rangetouch.js","src/js/config.js","src/js/utils/css.js","src/js/utils/events.js","src/js/utils/is.js","src/js/utils/numbers.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","defaults","addCSS","thumbWidth","watch","matches","element","selector","Array","from","document","querySelectorAll","includes","this","call","trigger","type","event","Event","dispatchEvent","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isArray","isNodeList","NodeList","isElement","Element","isEvent","isEmpty","keys","is","nullOrUndefined","object","number","string","boolean","function","array","nodeList","empty","getDecimalPlaces","value","match","concat","Math","max","round","step","places","parseFloat","toFixed","RangeTouch","a","options","querySelector","rangeTouch","config","assign","init","enabled","style","userSelect","webKitUserSelect","touchAction","listeners","toggle","b","method","forEach","set","percent","touch","changedTouches","min","getAttribute","clientRect","getBoundingClientRect","width","clientX","left","disabled","preventDefault","get","arguments","targets","filter","MutationObserver","mutations","mutation","addedNodes","node","observe","body","childList","subtree","map","t","documentElement"],"mappings":"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","file":"rangetouch.mjs","sourcesContent":["// ==========================================================================\n// rangetouch.js v2.0.0\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './config';\nimport { matches } from './utils/css';\nimport { trigger } from './utils/events';\nimport is from './utils/is';\nimport { round } from './utils/numbers';\n\nclass RangeTouch {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.element = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.element = document.querySelector(target);\n        }\n\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\n            return;\n        }\n\n        this.config = Object.assign({}, defaults, options);\n\n        this.init();\n    }\n\n    static get enabled() {\n        return 'ontouchstart' in document.documentElement;\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.empty(target) || is.string(target)) {\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const range = new RangeTouch(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new RangeTouch(t, options));\n    }\n\n    init() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            // TODO: Restore original values on destroy\n            this.element.style.userSelect = 'none';\n            this.element.style.webKitUserSelect = 'none';\n            this.element.style.touchAction = 'manipulation';\n        }\n\n        this.listeners(true);\n\n        this.element.rangeTouch = this;\n    }\n\n    destroy() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        this.listeners(false);\n\n        this.element.rangeTouch = null;\n    }\n\n    listeners(toggle) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        // Listen for events\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\n            this.element[method](type, event => this.set(event), false);\n        });\n    }\n\n    /**\n     * Get the value based on touch position\n     * @param {Event} event\n     */\n    get(event) {\n        if (!RangeTouch.enabled || !is.event(event)) {\n            return null;\n        }\n\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    /**\n     * Update range value based on position\n     * @param {Event} event\n     */\n    set(event) {\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","const defaults = {\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\n    thumbWidth: 15, // The width of the thumb handle\n    watch: true, // Watch for new elements that match a string target\n};\n\nexport default defaults;","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default {};\n","// Trigger event\nexport function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type);\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\nexport default {};\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n\nexport default {};\n"]}