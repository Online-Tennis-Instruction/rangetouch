{"version":3,"sources":["src/js/config.js","src/js/utils/css.js","src/js/utils/events.js","src/js/rangetouch.js","src/js/utils/is.js","src/js/utils/numbers.js"],"names":["defaults","addCSS","thumbWidth","watch","matches","element","selector","Array","from","document","querySelectorAll","includes","this","call","trigger","type","c","Event","bubbles","dispatchEvent","event","getConstructor","input","constructor","instanceOf","b","isNullOrUndefined","isObject","Object","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isArray","isNodeList","NodeList","isElement","Element","isEvent","isEmpty","length","keys","is","nullOrUndefined","object","number","string","boolean","function","array","nodeList","empty","getDecimalPlaces","value","match","Math","max","round","step","parseFloat","toFixed","places","RangeTouch","target","options","querySelector","rangeTouch","config","init","enabled","documentElement","static","arguments","targets","filter","d","MutationObserver","mutations","forEach","mutation","addedNodes","node","observe","body","childList","subtree","map","t","style","userSelect","webKitUserSelect","touchAction","listeners","destroy","toggle","method","set","get","touch","changedTouches","min","getAttribute","g","h","getBoundingClientRect","clientRect","width","height","clientY","top","clientX","left","percent","disabled","preventDefault"],"mappings":"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","file":"rangetouch.mjs","sourcesContent":["const defaults = {\r\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\r\n    thumbWidth: 15, // The width of the thumb handle\r\n    watch: true, // Watch for new elements that match a string target\r\n};\r\n\r\nexport default defaults;","// Element matches a selector\r\nexport function matches(element, selector) {\r\n    const prototype = { Element };\r\n\r\n    function match() {\r\n        return Array.from(document.querySelectorAll(selector)).includes(this);\r\n    }\r\n\r\n    const method =\r\n        prototype.matches ||\r\n        prototype.webkitMatchesSelector ||\r\n        prototype.mozMatchesSelector ||\r\n        prototype.msMatchesSelector ||\r\n        match;\r\n\r\n    return method.call(element, selector);\r\n}\r\n\r\nexport default { matches };\r\n","// Trigger event\r\nexport function trigger(element, type) {\r\n    if (!element || !type) {\r\n        return;\r\n    }\r\n\r\n    // Create and dispatch the event\r\n    const event = new Event(type, { bubbles: true });\r\n\r\n    // Dispatch the event\r\n    element.dispatchEvent(event);\r\n}\r\n\r\nexport default { trigger };\r\n","// ==========================================================================\r\n// rangetouch.js v2.0.1\r\n// Making <input type=\"range\"> work on touch devices\r\n// https://github.com/sampotts/rangetouch\r\n// License: The MIT License (MIT)\r\n// ==========================================================================\r\n\r\nimport defaults from './config';\r\nimport { matches } from './utils/css';\r\nimport { trigger } from './utils/events';\r\nimport is from './utils/is';\r\nimport { round } from './utils/numbers';\r\n\r\nclass RangeTouch {\r\n    /**\r\n     * Setup a new instance\r\n     * @param {String|Element} target\r\n     * @param {Object} options\r\n     */\r\n    constructor(target, options) {\r\n        if (is.element(target)) {\r\n            // An Element is passed, use it directly\r\n            this.element = target;\r\n        } else if (is.string(target)) {\r\n            // A CSS Selector is passed, fetch it from the DOM\r\n            this.element = document.querySelector(target);\r\n        }\r\n\r\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\r\n            return;\r\n        }\r\n\r\n        this.config = { ...defaults, ...options };\r\n\r\n        this.init();\r\n    }\r\n\r\n    static get enabled() {\r\n        return 'ontouchstart' in document.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Setup multiple instances\r\n     * @param {String|Element|NodeList|Array} target\r\n     * @param {Object} options\r\n     */\r\n    static setup(target, options = {}) {\r\n        let targets = null;\r\n\r\n        if (is.empty(target) || is.string(target)) {\r\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\r\n        } else if (is.element(target)) {\r\n            targets = [target];\r\n        } else if (is.nodeList(target)) {\r\n            targets = Array.from(target);\r\n        } else if (is.array(target)) {\r\n            targets = target.filter(is.element);\r\n        }\r\n\r\n        if (is.empty(targets)) {\r\n            return null;\r\n        }\r\n\r\n        const config = { ...defaults, ...options };\r\n\r\n        if (is.string(target) && config.watch) {\r\n            // Create an observer instance\r\n            const observer = new MutationObserver(mutations => {\r\n                Array.from(mutations).forEach(mutation => {\r\n                    Array.from(mutation.addedNodes).forEach(node => {\r\n                        if (!is.element(node) || !matches(node, target)) {\r\n                            return;\r\n                        }\r\n\r\n                        // eslint-disable-next-line no-unused-vars\r\n                        const range = new RangeTouch(node, config);\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Pass in the target node, as well as the observer options\r\n            observer.observe(document.body, {\r\n                childList: true,\r\n                subtree: true,\r\n            });\r\n        }\r\n\r\n        return targets.map(t => new RangeTouch(t, options));\r\n    }\r\n\r\n    init() {\r\n        // Bail if not a touch enabled device\r\n        if (!RangeTouch.enabled) {\r\n            return;\r\n        }\r\n\r\n        // Add useful CSS\r\n        if (this.config.addCSS) {\r\n            this.element.style.userSelect = 'none';\r\n            this.element.style.webKitUserSelect = 'none';\r\n            this.element.style.touchAction = 'manipulation';\r\n        }\r\n\r\n        this.listeners(true);\r\n\r\n        this.element.rangeTouch = this;\r\n    }\r\n\r\n    destroy() {\r\n        // Bail if not a touch enabled device\r\n        if (!RangeTouch.enabled) {\r\n            return;\r\n        }\r\n\r\n        // Remove useful CSS\r\n        if (this.config.addCSS) {\r\n            this.element.style.userSelect = '';\r\n            this.element.style.webKitUserSelect = '';\r\n            this.element.style.touchAction = '';\r\n        }\r\n\r\n        this.listeners(false);\r\n\r\n        this.element.rangeTouch = null;\r\n    }\r\n\r\n    listeners(toggle) {\r\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\r\n\r\n        // Listen for events\r\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\r\n            this.element[method](type, event => this.set(event), false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the value based on touch position\r\n     * @param {Event} event\r\n     */\r\n    get(event) {\r\n        if (!RangeTouch.enabled || !is.event(event)) {\r\n            return null;\r\n        }\r\n\r\n        const input = event.target;\r\n        const touch = event.changedTouches[0];\r\n        const min = parseFloat(input.getAttribute('min')) || 0;\r\n        const max = parseFloat(input.getAttribute('max')) || 100;\r\n        const step = parseFloat(input.getAttribute('step')) || 1;\r\n        const delta = max - min;\r\n\r\n        // Calculate percentage\r\n        let percent;\r\n        const clientRect = input.getBoundingClientRect();\r\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\r\n\r\n        // Determine left percentage\r\n        if(clientRect.height > clientRect.width) {\r\n            percent = (100 / clientRect.height) * (touch.clientY - clientRect.top);\r\n        } else {\r\n            percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\r\n        }\r\n\r\n        // Don't allow outside bounds\r\n        if (percent < 0) {\r\n            percent = 0;\r\n        } else if (percent > 100) {\r\n            percent = 100;\r\n        }\r\n\r\n        // Factor in the thumb offset\r\n        if (percent < 50) {\r\n            percent -= (100 - percent * 2) * thumbWidth;\r\n        } else if (percent > 50) {\r\n            percent += (percent - 50) * 2 * thumbWidth;\r\n        }\r\n\r\n        // Find the closest step to the mouse position\r\n        return min + round(delta * (percent / 100), step);\r\n    }\r\n\r\n    /**\r\n     * Update range value based on position\r\n     * @param {Event} event\r\n     */\r\n    set(event) {\r\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\r\n            return;\r\n        }\r\n\r\n        // Prevent text highlight on iOS\r\n        event.preventDefault();\r\n\r\n        // Set value\r\n        // eslint-disable-next-line no-param-reassign\r\n        event.target.value = this.get(event);\r\n\r\n        // Trigger event\r\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\r\n    }\r\n}\r\n\r\nexport default RangeTouch;\r\n","// ==========================================================================\r\n// Type checking utils\r\n// ==========================================================================\r\n\r\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\r\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\r\n\r\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\r\nconst isObject = input => getConstructor(input) === Object;\r\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\r\nconst isString = input => getConstructor(input) === String;\r\nconst isBoolean = input => getConstructor(input) === Boolean;\r\nconst isFunction = input => getConstructor(input) === Function;\r\nconst isArray = input => Array.isArray(input);\r\nconst isNodeList = input => instanceOf(input, NodeList);\r\nconst isElement = input => instanceOf(input, Element);\r\nconst isEvent = input => instanceOf(input, Event);\r\nconst isEmpty = input =>\r\n    isNullOrUndefined(input) ||\r\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\r\n    (isObject(input) && !Object.keys(input).length);\r\n\r\nexport default {\r\n    nullOrUndefined: isNullOrUndefined,\r\n    object: isObject,\r\n    number: isNumber,\r\n    string: isString,\r\n    boolean: isBoolean,\r\n    function: isFunction,\r\n    array: isArray,\r\n    nodeList: isNodeList,\r\n    element: isElement,\r\n    event: isEvent,\r\n    empty: isEmpty,\r\n};\r\n","// Get the number of decimal places\r\nexport function getDecimalPlaces(value) {\r\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n\r\n    if (!match) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(\r\n        0,\r\n        // Number of digits right of decimal point.\r\n        (match[1] ? match[1].length : 0) -\r\n            // Adjust for scientific notation.\r\n            (match[2] ? +match[2] : 0),\r\n    );\r\n}\r\n\r\n// Round to the nearest step\r\nexport function round(number, step) {\r\n    if (step < 1) {\r\n        const places = getDecimalPlaces(step);\r\n        return parseFloat(number.toFixed(places));\r\n    }\r\n    return Math.round(number / step) * step;\r\n}\r\n\r\nexport default { getDecimalPlaces, round };\r\n"]}